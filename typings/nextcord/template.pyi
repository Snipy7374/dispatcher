"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, TYPE_CHECKING, Union
from .enums import VoiceRegion
from .guild import Guild
from .asset import Asset
from .file import File
from .message import Attachment
from .state import ConnectionState
from .types.template import Template as TemplatePayload

__all__ = ("Template", )
if TYPE_CHECKING:
    ...
class _FriendlyHttpAttributeErrorHelper:
    __slots__ = ...
    def __getattr__(self, attr):
        ...
    


class _PartialTemplateState:
    def __init__(self, *, state) -> None:
        ...
    
    @property
    def shard_count(self):
        ...
    
    @property
    def user(self):
        ...
    
    @property
    def self_id(self):
        ...
    
    @property
    def member_cache_flags(self):
        ...
    
    def store_emoji(self, guild, packet): # -> None:
        ...
    
    async def query_members(self, **kwargs: Any): # -> list[Unknown]:
        ...
    
    def __getattr__(self, attr):
        ...
    


class Template:
    """Represents a Discord template.

    .. versionadded:: 1.4

    Attributes
    ----------
    code: :class:`str`
        The template code.
    uses: :class:`int`
        How many times the template has been used.
    name: :class:`str`
        The name of the template.
    description: :class:`str`
        The description of the template.
    creator: :class:`User`
        The creator of the template.
    created_at: :class:`datetime.datetime`
        An aware datetime in UTC representing when the template was created.
    updated_at: :class:`datetime.datetime`
        An aware datetime in UTC representing when the template was last updated.
        This is referred to as "last synced" in the official Discord client.
    source_guild: :class:`Guild`
        The source guild.
    is_dirty: Optional[:class:`bool`]
        Whether the template has unsynced changes.

        .. versionadded:: 2.0
    """
    __slots__ = ...
    def __init__(self, *, state: ConnectionState, data: TemplatePayload) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    async def create_guild(self, name: str, region: Optional[VoiceRegion] = ..., icon: Optional[Union[bytes, Asset, Attachment, File]] = ...) -> Guild:
        """|coro|

        Creates a :class:`.Guild` using the template.

        Bot accounts in more than 10 guilds are not allowed to create guilds.

        .. versionchanged:: 2.1
            The ``icon`` parameter now accepts :class:`File`, :class:`Attachment`, and :class:`Asset`.

        Parameters
        ----------
        name: :class:`str`
            The name of the guild.
        region: :class:`.VoiceRegion`
            The region for the voice communication server.
            Defaults to :attr:`.VoiceRegion.us_west`.
        icon: Optional[Union[:class:`bytes`, :class:`Asset`, :class:`Attachment`, :class:`File`]]
            The :term:`py:bytes-like object`, :class:`File`, :class:`Attachment`, or :class:`Asset`
            representing the icon. See :meth:`.ClientUser.edit` for more details on what is expected.

        Raises
        ------
        HTTPException
            Guild creation failed.
        InvalidArgument
            Invalid icon image format given. Must be PNG or JPG.

        Returns
        -------
        :class:`.Guild`
            The guild created. This is not the same guild that is
            added to cache.
        """
        ...
    
    async def sync(self) -> Template:
        """|coro|

        Sync the template to the guild's current state.

        You must have the :attr:`~Permissions.manage_guild` permission in the
        source guild to do this.

        .. versionadded:: 1.7

        .. versionchanged:: 2.0
            The template is no longer edited in-place, instead it is returned.

        Raises
        ------
        HTTPException
            Editing the template failed.
        Forbidden
            You don't have permissions to edit the template.
        NotFound
            This template does not exist.

        Returns
        -------
        :class:`Template`
            The newly edited template.
        """
        ...
    
    async def edit(self, *, name: str = ..., description: Optional[str] = ...) -> Template:
        """|coro|

        Edit the template metadata.

        You must have the :attr:`~Permissions.manage_guild` permission in the
        source guild to do this.

        .. versionadded:: 1.7

        .. versionchanged:: 2.0
            The template is no longer edited in-place, instead it is returned.

        Parameters
        ----------
        name: :class:`str`
            The template's new name.
        description: Optional[:class:`str`]
            The template's new description.

        Raises
        ------
        HTTPException
            Editing the template failed.
        Forbidden
            You don't have permissions to edit the template.
        NotFound
            This template does not exist.

        Returns
        -------
        :class:`Template`
            The newly edited template.
        """
        ...
    
    async def delete(self) -> None:
        """|coro|

        Delete the template.

        You must have the :attr:`~Permissions.manage_guild` permission in the
        source guild to do this.

        .. versionadded:: 1.7

        Raises
        ------
        HTTPException
            Editing the template failed.
        Forbidden
            You don't have permissions to edit the template.
        NotFound
            This template does not exist.
        """
        ...
    
    @property
    def url(self) -> str:
        """:class:`str`: The template url.

        .. versionadded:: 2.0
        """
        ...
    


