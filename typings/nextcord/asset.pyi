"""
This type stub file was generated by pyright.
"""

import io
import os
from typing import Any, Literal, Optional, TYPE_CHECKING, Tuple, Union
from . import utils
from .file import File

__all__ = ("Asset", )
if TYPE_CHECKING:
    ValidStaticFormatTypes = Literal["webp", "jpeg", "jpg", "png"]
    ValidAssetFormatTypes = Literal["webp", "jpeg", "jpg", "png", "gif"]
VALID_STATIC_FORMATS = ...
VALID_ASSET_FORMATS = ...
MISSING = utils.MISSING
class AssetMixin:
    url: str
    _state: Optional[Any]
    __slots__: tuple[str, ...] = ...
    async def read(self) -> bytes:
        """|coro|

        Retrieves the content of this asset as a :class:`bytes` object.

        Raises
        ------
        DiscordException
            There was no internal connection state.
        HTTPException
            Downloading the asset failed.
        NotFound
            The asset was deleted.

        Returns
        -------
        :class:`bytes`
            The content of the asset.
        """
        ...
    
    async def save(self, fp: Union[str, bytes, os.PathLike, io.BufferedIOBase], *, seek_begin: bool = ...) -> int:
        """|coro|

        Saves this asset into a file-like object.

        Parameters
        ----------
        fp: Union[:class:`io.BufferedIOBase`, :class:`os.PathLike`]
            The file-like object to save this asset to or the filename
            to use. If a filename is passed then a file is created with that
            filename and used instead.
        seek_begin: :class:`bool`
            Whether to seek to the beginning of the file after saving is
            successfully done.

        Raises
        ------
        DiscordException
            There was no internal connection state.
        HTTPException
            Downloading the asset failed.
        NotFound
            The asset was deleted.

        Returns
        -------
        :class:`int`
            The number of bytes written.
        """
        ...
    
    async def to_file(self, *, filename: Optional[str] = ..., description: Optional[str] = ..., spoiler: bool = ..., force_close: bool = ...) -> File:
        """|coro|

        Converts the asset into a :class:`File` suitable for sending via
        :meth:`abc.Messageable.send`.

        .. versionadded:: 2.0

        Parameters
        ----------
        filename: Optional[:class:`str`]
            The filename of the file. If not provided, then the filename from
            the asset's URL is used.
        description: Optional[:class:`str`]
            The description for the file.
        spoiler: :class:`bool`
            Whether the file is a spoiler.
        force_close: :class:`bool`
            Whether to forcibly close the bytes used to create the file
            when ``.close()`` is called.
            This will also make the file bytes unusable by flushing it from
            memory after it is sent or used once.
            Keep this enabled if you don't wish to reuse the same bytes.

            .. versionadded:: 2.2

        Raises
        ------
        DiscordException
            The asset does not have an associated state.
        InvalidArgument
            The asset is a unicode emoji.
        TypeError
            The asset is a sticker with lottie type.
        HTTPException
            Downloading the asset failed.
        NotFound
            The asset was deleted.

        Returns
        -------
        :class:`File`
            The asset as a file suitable for sending.
        """
        ...
    


class Asset(AssetMixin):
    """Represents a CDN asset on Discord.

    .. container:: operations

        .. describe:: str(x)

            Returns the URL of the CDN asset.

        .. describe:: len(x)

            Returns the length of the CDN asset's URL.

        .. describe:: x == y

            Checks if the asset is equal to another asset.

        .. describe:: x != y

            Checks if the asset is not equal to another asset.

        .. describe:: hash(x)

            Returns the hash of the asset.
    """
    __slots__: Tuple[str, ...] = ...
    BASE = ...
    def __init__(self, state, *, url: str, key: str, animated: bool = ...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    @property
    def url(self) -> str:
        """:class:`str`: Returns the underlying URL of the asset."""
        ...
    
    @property
    def key(self) -> str:
        """:class:`str`: Returns the identifying key of the asset."""
        ...
    
    def is_animated(self) -> bool:
        """:class:`bool`: Returns whether the asset is animated."""
        ...
    
    def replace(self, *, size: int = ..., format: ValidAssetFormatTypes = ..., static_format: ValidStaticFormatTypes = ...) -> Asset:
        """Returns a new asset with the passed components replaced.

        Parameters
        ----------
        size: :class:`int`
            The new size of the asset.
        format: :class:`str`
            The new format to change it to. Must be either
            'webp', 'jpeg', 'jpg', 'png', or 'gif' if it's animated.
        static_format: :class:`str`
            The new format to change it to if the asset isn't animated.
            Must be either 'webp', 'jpeg', 'jpg', or 'png'.

        Raises
        ------
        InvalidArgument
            An invalid size or format was passed.

        Returns
        -------
        :class:`Asset`
            The newly updated asset.
        """
        ...
    
    def with_size(self, size: int, /) -> Asset:
        """Returns a new asset with the specified size.

        Parameters
        ----------
        size: :class:`int`
            The new size of the asset.

        Raises
        ------
        InvalidArgument
            The asset had an invalid size.

        Returns
        -------
        :class:`Asset`
            The new updated asset.
        """
        ...
    
    def with_format(self, format: ValidAssetFormatTypes, /) -> Asset:
        """Returns a new asset with the specified format.

        Parameters
        ----------
        format: :class:`str`
            The new format of the asset.

        Raises
        ------
        InvalidArgument
            The asset had an invalid format.

        Returns
        -------
        :class:`Asset`
            The new updated asset.
        """
        ...
    
    def with_static_format(self, format: ValidStaticFormatTypes, /) -> Asset:
        """Returns a new asset with the specified static format.

        This only changes the format if the underlying asset is
        not animated. Otherwise, the asset is not changed.

        Parameters
        ----------
        format: :class:`str`
            The new static format of the asset.

        Raises
        ------
        InvalidArgument
            The asset had an invalid format.

        Returns
        -------
        :class:`Asset`
            The new updated asset.
        """
        ...
    


