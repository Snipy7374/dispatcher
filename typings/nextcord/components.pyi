"""
This type stub file was generated by pyright.
"""

from typing import ClassVar, Optional, TYPE_CHECKING, Tuple, TypeVar, Union
from .enums import ComponentType
from .partial_emoji import PartialEmoji
from .emoji import Emoji
from .types.components import ActionRow as ActionRowPayload, ButtonComponent as ButtonComponentPayload, ChannelSelectMenu as ChannelSelectMenuPayload, Component as ComponentPayload, MentionableSelectMenu as MentionableSelectMenuPayload, RoleSelectMenu as RoleSelectMenuPayload, SelectMenu as SelectMenuPayload, SelectMenuBase as SelectMenuBasePayload, SelectOption as SelectOptionPayload, TextInputComponent as TextInputComponentPayload, UserSelectMenu as UserSelectMenuPayload

if TYPE_CHECKING:
    ...
__all__ = ("Component", "ActionRow", "Button", "SelectMenu", "SelectOption", "TextInput")
C = TypeVar("C", bound="Component")
class Component:
    """Represents a Discord Bot UI Kit Component.

    Currently, the only components supported by Discord are:

    - :class:`ActionRow`
    - :class:`Button`
    - :class:`SelectMenu`
    - :class:`TextInput`
    - :class:`UserSelectMenu`
    - :class:`ChannelSelectMenu`
    - :class:`RoleSelectMenu`
    - :class:`MentionableSelectMenu`

    This class is abstract and cannot be instantiated.

    .. versionadded:: 2.0

    Attributes
    ----------
    type: :class:`ComponentType`
        The type of component.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]]
    type: ComponentType
    def __repr__(self) -> str:
        ...
    
    def to_dict(self) -> ComponentPayload:
        ...
    


class ActionRow(Component):
    """Represents a Discord Bot UI Kit Action Row.

    This is a component that holds up to 5 children components in a row.

    This inherits from :class:`Component`.

    .. versionadded:: 2.0

    Attributes
    ----------
    type: :class:`ComponentType`
        The type of component.
    children: List[:class:`Component`]
        The children components that this holds, if any.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: ComponentPayload) -> None:
        ...
    
    def to_dict(self) -> ActionRowPayload:
        ...
    


class Button(Component):
    """Represents a button from the Discord Bot UI Kit.

    This inherits from :class:`Component`.

    .. note::

        The user constructible and usable type to create a button is :class:`nextcord.ui.Button`
        not this one.

    .. versionadded:: 2.0

    Attributes
    ----------
    style: :class:`.ButtonStyle`
        The style of the button.
    custom_id: Optional[:class:`str`]
        The ID of the button that gets received during an interaction.
        If this button is for a URL, it does not have a custom ID.
    url: Optional[:class:`str`]
        The URL this button sends you to.
    disabled: :class:`bool`
        Whether the button is disabled or not.
    label: Optional[:class:`str`]
        The label of the button, if any.
    emoji: Optional[:class:`PartialEmoji`]
        The emoji of the button, if available.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: ButtonComponentPayload) -> None:
        ...
    
    def to_dict(self) -> ButtonComponentPayload:
        ...
    


class SelectMenuBase(Component):
    """Represents a Discord Bot UI Kit Select Menu.

    This is the base class for all select menus.

    .. versionadded:: 2.3

    Attributes
    ----------
    custom_id: :class:`str`
        The ID of the select menu that gets received during an interaction.
    disabled: :class:`bool`
        Whether the select menu is disabled or not. Defaults to ``False``.
    placeholder: Optional[:class:`str`]
        The placeholder of the select menu, if any.
    min_values: :class:`int`
        The minimum number of values that must be chosen. Defaults to 1.
    max_values: :class:`int`
        The maximum number of values that can be chosen. Defaults to 1.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: SelectMenuBasePayload) -> None:
        ...
    
    def to_dict(self) -> SelectMenuBasePayload:
        ...
    


class StringSelectMenu(SelectMenuBase):
    """Represents a string select menu from the Discord Bot UI Kit.

    A select menu is functionally the same as a dropdown, however
    on mobile it renders a bit differently.

    There is an alias for this class called ``SelectMenu``.

    .. note::

        The user constructible and usable type to create a select menu is
        :class:`nextcord.ui.Select` not this one.

    .. versionadded:: 2.0

    Attributes
    ----------
    custom_id: Optional[:class:`str`]
        The ID of the select menu that gets received during an interaction.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    options: List[:class:`SelectOption`]
        A list of options that can be selected in this menu.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: SelectMenuPayload) -> None:
        ...
    
    def to_dict(self) -> SelectMenuPayload:
        ...
    


SelectMenu = StringSelectMenu
class UserSelectMenu(SelectMenuBase):
    """Represents a user select menu from the Discord Bot UI Kit.

    A user select menu is functionally the same as a dropdown, however
    on mobile it renders a bit differently.

    .. note::

        The user constructible and usable type to create a select menu is
        :class:`nextcord.ui.UserSelect` not this one.

    .. versionadded:: 2.3

    Attributes
    ----------
    custom_id: Optional[:class:`str`]
        The ID of the select menu that gets received during an interaction.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: UserSelectMenuPayload) -> None:
        ...
    
    def to_dict(self) -> UserSelectMenuPayload:
        ...
    


class RoleSelectMenu(SelectMenuBase):
    """Represents a role select menu from the Discord Bot UI Kit.

    A role select menu is functionally the same as a dropdown, however
    on mobile it renders a bit differently.

    .. note::

        The user constructible and usable type to create a select menu is
        :class:`nextcord.ui.RoleSelect` not this one.

    .. versionadded:: 2.3

    Attributes
    ----------
    custom_id: Optional[:class:`str`]
        The ID of the select menu that gets received during an interaction.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: RoleSelectMenuPayload) -> None:
        ...
    
    def to_dict(self) -> RoleSelectMenuPayload:
        ...
    


class MentionableSelectMenu(SelectMenuBase):
    """Represents a mentionable select menu from the Discord Bot UI Kit.

    A mentionable select menu is functionally the same as a dropdown, however
    on mobile it renders a bit differently.

    .. note::

        The user constructible and usable type to create a select menu is
        :class:`nextcord.ui.MentionableSelect` not this one.

    .. versionadded:: 2.3

    Attributes
    ----------
    custom_id: Optional[:class:`str`]
        The ID of the select menu that gets received during an interaction.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: MentionableSelectMenuPayload) -> None:
        ...
    
    def to_dict(self) -> MentionableSelectMenuPayload:
        ...
    


class ChannelSelectMenu(SelectMenuBase):
    """Represents a mentionable select menu from the Discord Bot UI Kit.

    A mentionable select menu is functionally the same as a dropdown, however
    on mobile it renders a bit differently.

    .. note::

        The user constructible and usable type to create a select menu is
        :class:`nextcord.ui.ChannelSelect` not this one.

    .. versionadded:: 2.3

    Attributes
    ----------
    custom_id: Optional[:class:`str`]
        The ID of the select menu that gets received during an interaction.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    channel_types: List[:class:`ChannelType`]
        The types of channels that can be selected. If not given, all channel types are allowed.
    """
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: ChannelSelectMenuPayload) -> None:
        ...
    
    def to_dict(self) -> ChannelSelectMenuPayload:
        ...
    


class SelectOption:
    """Represents a select menu's option.

    These can be created by users.

    .. versionadded:: 2.0

    Attributes
    ----------
    label: :class:`str`
        The label of the option. This is displayed to users.
        Can only be up to 100 characters.
    value: :class:`str`
        The value of the option. This is not displayed to users.
        If not provided when constructed then it defaults to the
        label. Can only be up to 100 characters.
    description: Optional[:class:`str`]
        An additional description of the option, if any.
        Can only be up to 100 characters.
    emoji: Optional[Union[:class:`str`, :class:`Emoji`, :class:`PartialEmoji`]]
        The emoji of the option, if available.
    default: :class:`bool`
        Whether this option is selected by default.
    """
    __slots__: Tuple[str, ...] = ...
    def __init__(self, *, label: str, value: str = ..., description: Optional[str] = ..., emoji: Optional[Union[str, Emoji, PartialEmoji]] = ..., default: bool = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    @classmethod
    def from_dict(cls, data: SelectOptionPayload) -> SelectOption:
        ...
    
    def to_dict(self) -> SelectOptionPayload:
        ...
    


class TextInput(Component):
    __slots__: Tuple[str, ...] = ...
    __repr_info__: ClassVar[Tuple[str, ...]] = ...
    def __init__(self, data: TextInputComponentPayload) -> None:
        ...
    
    def to_dict(self) -> TextInputComponentPayload:
        ...
    


