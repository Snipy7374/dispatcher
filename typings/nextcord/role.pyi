"""
This type stub file was generated by pyright.
"""

import datetime
from typing import List, Optional, TYPE_CHECKING, Union
from .asset import Asset
from .colour import Colour
from .mixins import Hashable
from .permissions import Permissions
from typing_extensions import Self
from .file import File
from .guild import Guild
from .member import Member
from .message import Attachment
from .state import ConnectionState
from .types.role import Role as RolePayload, RoleTags as RoleTagPayload

__all__ = ("RoleTags", "Role")
if TYPE_CHECKING:
    ...
class RoleTags:
    """Represents tags on a role.

    A role tag is a piece of extra information attached to a managed role
    that gives it context for the reason the role is managed.

    While this can be accessed, a useful interface is also provided in the
    :class:`Role` and :class:`Guild` classes as well.

    .. versionadded:: 1.6

    Attributes
    ----------
    bot_id: Optional[:class:`int`]
        The bot's user ID that manages this role.
    integration_id: Optional[:class:`int`]
        The integration ID that manages the role.
    subscription_listing_id: Optional[:class:`int`]
        The ID of the subscription listing that manages the role.

        .. versionadded:: 2.4
    """
    __slots__ = ...
    def __init__(self, data: RoleTagPayload) -> None:
        ...
    
    def is_bot_managed(self) -> bool:
        """:class:`bool`: Whether the role is associated with a bot."""
        ...
    
    def is_premium_subscriber(self) -> bool:
        """:class:`bool`: Whether the role is the premium subscriber, AKA "boost", role for the guild."""
        ...
    
    def is_integration(self) -> bool:
        """:class:`bool`: Whether the role is managed by an integration."""
        ...
    
    def is_available_for_purchase(self) -> bool:
        """:class:`bool`: Whether the role is available for purchase.

        .. versionadded:: 2.4
        """
        ...
    
    def has_guild_connections(self) -> bool:
        """:class:`bool`: Whether the role is a guild's linked role.

        .. versionadded:: 2.4
        """
        ...
    
    def __repr__(self) -> str:
        ...
    


class Role(Hashable):
    """Represents a Discord role in a :class:`Guild`.

    .. container:: operations

        .. describe:: x == y

            Checks if two roles are equal.

        .. describe:: x != y

            Checks if two roles are not equal.

        .. describe:: x > y

            Checks if a role is higher than another in the hierarchy.

        .. describe:: x < y

            Checks if a role is lower than another in the hierarchy.

        .. describe:: x >= y

            Checks if a role is higher or equal to another in the hierarchy.

        .. describe:: x <= y

            Checks if a role is lower or equal to another in the hierarchy.

        .. describe:: hash(x)

            Return the role's hash.

        .. describe:: str(x)

            Returns the role's name.

    Attributes
    ----------
    id: :class:`int`
        The ID for the role.
    name: :class:`str`
        The name of the role.
    guild: :class:`Guild`
        The guild the role belongs to.
    hoist: :class:`bool`
         Indicates if the role will be displayed separately from other members.
    position: :class:`int`
        The position of the role. This number is usually positive. The bottom
        role has a position of 0.

        .. warning::

            Multiple roles can have the same position number. As a consequence
            of this, comparing via role position is prone to subtle bugs if
            checking for role hierarchy. The recommended and correct way to
            compare for roles in the hierarchy is using the comparison
            operators on the role objects themselves.

    managed: :class:`bool`
        Indicates if the role is managed by the guild through some form of
        integrations such as Twitch.
    mentionable: :class:`bool`
        Indicates if the role can be mentioned by users.
    tags: Optional[:class:`RoleTags`]
        The role tags associated with this role.
    """
    __slots__ = ...
    def __init__(self, *, guild: Guild, state: ConnectionState, data: RolePayload) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __lt__(self, other: Self) -> bool:
        ...
    
    def __le__(self, other: Self) -> bool:
        ...
    
    def __gt__(self, other: Self) -> bool:
        ...
    
    def __ge__(self, other: Self) -> bool:
        ...
    
    def is_default(self) -> bool:
        """:class:`bool`: Checks if the role is the default role."""
        ...
    
    def is_bot_managed(self) -> bool:
        """:class:`bool`: Whether the role is associated with a bot.

        .. versionadded:: 1.6
        """
        ...
    
    def is_premium_subscriber(self) -> bool:
        """:class:`bool`: Whether the role is the premium subscriber, AKA "boost", role for the guild.

        .. versionadded:: 1.6
        """
        ...
    
    def is_integration(self) -> bool:
        """:class:`bool`: Whether the role is managed by an integration.

        .. versionadded:: 1.6
        """
        ...
    
    def is_assignable(self) -> bool:
        """:class:`bool`: Whether the role is able to be assigned or removed by the bot.

        .. versionadded:: 2.0
        """
        ...
    
    @property
    def permissions(self) -> Permissions:
        """:class:`Permissions`: Returns the role's permissions."""
        ...
    
    @property
    def colour(self) -> Colour:
        """:class:`Colour`: Returns the role colour. An alias exists under ``color``."""
        ...
    
    @property
    def color(self) -> Colour:
        """:class:`Colour`: Returns the role color. An alias exists under ``colour``."""
        ...
    
    @property
    def created_at(self) -> datetime.datetime:
        """:class:`datetime.datetime`: Returns the role's creation time in UTC."""
        ...
    
    @property
    def mention(self) -> str:
        """:class:`str`: Returns a string that allows you to mention a role."""
        ...
    
    @property
    def members(self) -> List[Member]:
        """List[:class:`Member`]: Returns all the members with this role."""
        ...
    
    @property
    def icon(self) -> Optional[Union[Asset, str]]:
        """Optional[Union[:class:`Asset`, :class:`str`]]: Returns the role's icon asset or its
        unicode emoji, if available."""
        ...
    
    async def edit(self, *, name: str = ..., permissions: Permissions = ..., colour: Union[Colour, int] = ..., color: Union[Colour, int] = ..., hoist: bool = ..., mentionable: bool = ..., position: int = ..., reason: Optional[str] = ..., icon: Optional[Union[str, bytes, Asset, Attachment, File]] = ...) -> Optional[Role]:
        """|coro|

        Edits the role.

        You must have the :attr:`~Permissions.manage_roles` permission to
        use this.

        All fields are optional.

        .. versionchanged:: 1.4
            Can now pass ``int`` to ``colour`` keyword-only parameter.

        .. versionchanged:: 2.0
            Edits are no longer in-place, the newly edited role is returned instead.

        .. versionchanged:: 2.1
            The ``icon`` parameter now accepts :class:`Attachment`, and :class:`Asset`.

        Parameters
        ----------
        name: :class:`str`
            The new role name to change to.
        permissions: :class:`Permissions`
            The new permissions to change to.
        colour: Union[:class:`Colour`, :class:`int`]
            The new colour to change to. (aliased to color as well)
        hoist: :class:`bool`
            Indicates if the role should be shown separately in the member list.
        mentionable: :class:`bool`
            Indicates if the role should be mentionable by others.
        position: :class:`int`
            The new role's position. This must be below your top role's
            position or it will fail.
        icon: Optional[Union[:class:`str`, :class:`bytes`, :class:`File`, :class:`Asset`, :class:`Attachment`]]
            The role's icon image
        reason: Optional[:class:`str`]
            The reason for editing this role. Shows up on the audit log.

        Raises
        ------
        Forbidden
            You do not have permissions to change the role.
        HTTPException
            Editing the role failed.
        InvalidArgument
            An invalid position was given or the default
            role was asked to be moved.

        Returns
        -------
        :class:`Role`
            The newly edited role.
        """
        ...
    
    async def delete(self, *, reason: Optional[str] = ...) -> None:
        """|coro|

        Deletes the role.

        You must have the :attr:`~Permissions.manage_roles` permission to
        use this.

        Parameters
        ----------
        reason: Optional[:class:`str`]
            The reason for deleting this role. Shows up on the audit log.

        Raises
        ------
        Forbidden
            You do not have permissions to delete the role.
        HTTPException
            Deleting the role failed.
        """
        ...
    


