"""
This type stub file was generated by pyright.
"""

import datetime
from typing import Any, Callable, ClassVar, Dict, Generator, List, Optional, TYPE_CHECKING, Tuple, TypeVar, Union
from . import abc, enums, utils
from .auto_moderation import AutoModerationRule
from .invite import Invite
from .mixins import Hashable
from .object import Object
from .emoji import Emoji
from .guild import Guild
from .member import Member
from .role import Role
from .stage_instance import StageInstance
from .sticker import GuildSticker
from .threads import Thread
from .types.audit_log import AuditLogChange as AuditLogChangePayload, AuditLogEntry as AuditLogEntryPayload
from .user import User

__all__ = ("AuditLogDiff", "AuditLogChanges", "AuditLogEntry")
if TYPE_CHECKING:
    AuditTarget = Union[Guild, abc.GuildChannel, Member, User, Role, Invite, Emoji, StageInstance, GuildSticker, Thread, Object, AutoModerationRule, None,]
T = TypeVar("T")
E = TypeVar("E", bound=enums.Enum)
class AuditLogDiff:
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> Generator[Tuple[str, Any], None, None]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    if TYPE_CHECKING:
        def __getattr__(self, item: str) -> Any:
            ...
        
        def __setattr__(self, key: str, value: Any) -> Any:
            ...
        


Transformer = Callable[["AuditLogEntry", Any], Any]
class AuditLogChanges:
    TRANSFORMERS: ClassVar[Dict[str, Tuple[Optional[str], Optional[Transformer]]]] = ...
    def __init__(self, entry: AuditLogEntry, data: List[AuditLogChangePayload]) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class _AuditLogProxyMemberPrune:
    delete_member_days: int
    members_removed: int
    ...


class _AuditLogProxyMemberMoveOrMessageDelete:
    channel: abc.GuildChannel
    count: int
    ...


class _AuditLogProxyMemberDisconnect:
    count: int
    ...


class _AuditLogProxyPinAction:
    channel: abc.GuildChannel
    message_id: int
    ...


class _AuditLogProxyStageInstanceAction:
    channel: abc.GuildChannel
    ...


class _AuditLogProxyAutoModerationBlockMessage:
    channel: abc.GuildChannel
    rule_name: str
    rule_trigger_type: enums.AutoModerationTriggerType
    ...


class AuditLogEntry(Hashable):
    r"""Represents an Audit Log entry.

    You retrieve these via :meth:`Guild.audit_logs`.

    .. container:: operations

        .. describe:: x == y

            Checks if two entries are equal.

        .. describe:: x != y

            Checks if two entries are not equal.

        .. describe:: hash(x)

            Returns the entry's hash.

    .. versionchanged:: 1.7
        Audit log entries are now comparable and hashable.

    Attributes
    ----------
    action: :class:`AuditLogAction`
        The action that was done.
    user: :class:`abc.User`
        The user who initiated this action. Usually a :class:`Member`\, unless gone
        then it's a :class:`User`.
    id: :class:`int`
        The entry ID.
    target: Any
        The target that got changed. The exact type of this depends on
        the action being done.
    reason: Optional[:class:`str`]
        The reason this action was done.
    extra: Any
        Extra information that this entry has that might be useful.
        For most actions, this is ``None``. However in some cases it
        contains extra information. See :class:`AuditLogAction` for
        which actions have this field filled out.
    """
    extra: Union[_AuditLogProxyMemberPrune, _AuditLogProxyMemberMoveOrMessageDelete, _AuditLogProxyMemberDisconnect, _AuditLogProxyPinAction, _AuditLogProxyStageInstanceAction, _AuditLogProxyAutoModerationBlockMessage, Member, User, None, Role,]
    def __init__(self, *, auto_moderation_rules: Dict[int, AutoModerationRule], users: Dict[int, User], data: AuditLogEntryPayload, guild: Guild) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @utils.cached_property
    def created_at(self) -> datetime.datetime:
        """:class:`datetime.datetime`: Returns the entry's creation time in UTC."""
        ...
    
    @utils.cached_property
    def target(self) -> AuditTarget:
        ...
    
    @utils.cached_property
    def category(self) -> Optional[enums.AuditLogActionCategory]:
        """Optional[:class:`AuditLogActionCategory`]: The category of the action, if applicable."""
        ...
    
    @utils.cached_property
    def changes(self) -> AuditLogChanges:
        """:class:`AuditLogChanges`: The list of changes this entry has."""
        ...
    
    @utils.cached_property
    def before(self) -> AuditLogDiff:
        """:class:`AuditLogDiff`: The target's prior state."""
        ...
    
    @utils.cached_property
    def after(self) -> AuditLogDiff:
        """:class:`AuditLogDiff`: The target's subsequent state."""
        ...
    


