"""
This type stub file was generated by pyright.
"""

from collections import UserList
from typing import List, Optional, TYPE_CHECKING, Tuple, TypeVar
from ...components import SelectMenu
from ...enums import ComponentType
from ...guild import Guild
from ...state import ConnectionState
from ..item import Item
from typing_extensions import Self
from ...types.components import SelectMenu as SelectMenuPayload
from ...types.interactions import ComponentInteractionData, ComponentInteractionResolved

__all__ = ("SelectBase", )
if TYPE_CHECKING:
    ...
V = TypeVar("V", bound="View", covariant=True)
class SelectValuesBase(UserList):
    def __init__(self) -> None:
        ...
    
    @classmethod
    def construct(cls, values: List[str], resolved: ComponentInteractionResolved, state: ConnectionState, guild: Optional[Guild]): # -> Self@SelectValuesBase:
        ...
    
    @property
    def ids(self) -> List[int]:
        ...
    


class SelectBase(Item[V]):
    """Represents a UI select menu without any options.

    This is usually represented as a drop down menu.

    In order to get the selected items that the user has chosen, use :attr:`Select.values`.

    .. warning:: This class is not meant to be instantiated by the user. In order to create a select menu, use :class:`Select` instead.

    .. versionadded:: 2.3

    Parameters
    ----------
    custom_id: :class:`str`
        The ID of the select menu that gets received during an interaction.
        If not given then one is generated for you.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not.
    row: Optional[:class:`int`]
        The relative row this select menu belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    """
    __item_repr_attributes__: Tuple[str, ...] = ...
    def __init__(self, *, custom_id: str = ..., placeholder: Optional[str] = ..., min_values: int = ..., max_values: int = ..., disabled: bool = ..., row: Optional[int] = ...) -> None:
        ...
    
    @property
    def custom_id(self) -> str:
        """:class:`str`: The ID of the select menu that gets received during an interaction."""
        ...
    
    @custom_id.setter
    def custom_id(self, value: str) -> None:
        ...
    
    @property
    def placeholder(self) -> Optional[str]:
        """Optional[:class:`str`]: The placeholder text that is shown if nothing is selected, if any."""
        ...
    
    @placeholder.setter
    def placeholder(self, value: Optional[str]): # -> None:
        ...
    
    @property
    def min_values(self) -> int:
        """:class:`int`: The minimum number of items that must be chosen for this select menu."""
        ...
    
    @min_values.setter
    def min_values(self, value: int) -> None:
        ...
    
    @property
    def max_values(self) -> int:
        """:class:`int`: The maximum number of items that must be chosen for this select menu."""
        ...
    
    @max_values.setter
    def max_values(self, value: int) -> None:
        ...
    
    @property
    def disabled(self) -> bool:
        """:class:`bool`: Whether the select is disabled or not."""
        ...
    
    @disabled.setter
    def disabled(self, value: bool) -> None:
        ...
    
    @property
    def values(self) -> List[str]:
        """List[:class:`str`]: A list of values that have been selected by the user."""
        ...
    
    @property
    def width(self) -> int:
        ...
    
    def to_component_dict(self) -> SelectMenuPayload:
        ...
    
    def refresh_component(self, component: SelectMenu) -> None:
        ...
    
    def refresh_state(self, data: ComponentInteractionData, state: ConnectionState, guild: Optional[Guild]) -> None:
        ...
    
    @classmethod
    def from_component(cls, component: SelectMenu) -> Self:
        ...
    
    @property
    def type(self) -> ComponentType:
        ...
    
    def is_dispatchable(self) -> bool:
        ...
    


