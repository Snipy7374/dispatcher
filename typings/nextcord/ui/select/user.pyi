"""
This type stub file was generated by pyright.
"""

from typing import Callable, Generic, List, Optional, TYPE_CHECKING, Tuple, TypeVar
from ...components import UserSelectMenu
from ...interactions import ClientT
from ...member import Member
from ...user import User
from ..item import ItemCallbackType
from .base import SelectBase, SelectValuesBase
from typing_extensions import Self
from ...guild import Guild
from ...state import ConnectionState
from ...types.components import UserSelectMenu as UserSelectMenuPayload
from ...types.interactions import ComponentInteractionData

if TYPE_CHECKING:
    ...
__all__ = ("UserSelect", "user_select", "UserSelectValues")
V = TypeVar("V", bound="View", covariant=True)
class UserSelectValues(SelectValuesBase):
    """Represents the values of a :class:`.ui.UserSelect`."""
    @property
    def members(self) -> List[Member]:
        """List[:class:`.Member`]: A list of members that were selected."""
        ...
    
    @property
    def users(self) -> List[User]:
        """List[:class:`.User`]: A list of users that were selected."""
        ...
    


class UserSelect(SelectBase, Generic[V]):
    """Represents a UI user select menu.

    This is usually represented as a drop down menu.

    In order to get the selected items that the user has chosen, use :attr:`UserSelect.values`.

    .. versionadded:: 2.3

    Parameters
    ----------
    custom_id: :class:`str`
        The ID of the select menu that gets received during an interaction.
        If not given then one is generated for you.
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    row: Optional[:class:`int`]
        The relative row this select menu belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    """
    __item_repr_attributes__: Tuple[str, ...] = ...
    def __init__(self, *, custom_id: str = ..., placeholder: Optional[str] = ..., min_values: int = ..., max_values: int = ..., disabled: bool = ..., row: Optional[int] = ...) -> None:
        ...
    
    @property
    def values(self) -> UserSelectValues:
        """:class:`.ui.UserSelectValues`: A list of Union[:class:`.Member`, :class:`.User`] that have been selected by the user."""
        ...
    
    def to_component_dict(self) -> UserSelectMenuPayload:
        ...
    
    @classmethod
    def from_component(cls, component: UserSelectMenu) -> Self:
        ...
    
    def refresh_state(self, data: ComponentInteractionData, state: ConnectionState, guild: Optional[Guild]) -> None:
        ...
    


def user_select(*, placeholder: Optional[str] = ..., custom_id: str = ..., min_values: int = ..., max_values: int = ..., disabled: bool = ..., row: Optional[int] = ...) -> Callable[[ItemCallbackType[UserSelect[V], ClientT]], ItemCallbackType[UserSelect[V], ClientT]]:
    """A decorator that attaches a user select menu to a component.

    The function being decorated should have three parameters, ``self`` representing
    the :class:`.ui.View`, the :class:`.ui.UserSelect` being pressed and
    the :class:`.Interaction` you receive.

    In order to get the selected items that the user has chosen within the callback
    use :attr:`UserSelect.values`.

    .. versionadded:: 2.3

    Parameters
    ----------
    placeholder: Optional[:class:`str`]
        The placeholder text that is shown if nothing is selected, if any.
    custom_id: :class:`str`
        The ID of the select menu that gets received during an interaction.
        It is recommended not to set this parameter to prevent conflicts.
    row: Optional[:class:`int`]
        The relative row this select menu belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    min_values: :class:`int`
        The minimum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    max_values: :class:`int`
        The maximum number of items that must be chosen for this select menu.
        Defaults to 1 and must be between 1 and 25.
    disabled: :class:`bool`
        Whether the select is disabled or not. Defaults to ``False``.
    """
    ...

