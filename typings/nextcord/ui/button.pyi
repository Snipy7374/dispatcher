"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional, TYPE_CHECKING, Tuple, TypeVar, Union
from ..components import Button as ButtonComponent
from ..enums import ButtonStyle, ComponentType
from ..partial_emoji import PartialEmoji
from .item import Item, ItemCallbackType
from typing_extensions import Self
from ..emoji import Emoji
from ..interactions import ClientT
from ..types.components import ButtonComponent as ButtonComponentPayload

__all__ = ("Button", "button")
if TYPE_CHECKING:
    ...
V = TypeVar("V", bound="View", covariant=True)
class Button(Item[V]):
    """Represents a UI button.

    .. versionadded:: 2.0

    Parameters
    ----------
    style: :class:`nextcord.ButtonStyle`
        The style of the button.
    custom_id: Optional[:class:`str`]
        The ID of the button that gets received during an interaction.
        If this button is for a URL, it does not have a custom ID.
    url: Optional[:class:`str`]
        The URL this button sends you to.
    disabled: :class:`bool`
        Whether the button is disabled or not.
    label: Optional[:class:`str`]
        The label of the button, if any.
    emoji: Optional[Union[:class:`.PartialEmoji`, :class:`.Emoji`, :class:`str`]]
        The emoji of the button, if available.
    row: Optional[:class:`int`]
        The relative row this button belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    """
    __item_repr_attributes__: Tuple[str, ...] = ...
    def __init__(self, *, style: ButtonStyle = ..., label: Optional[str] = ..., disabled: bool = ..., custom_id: Optional[str] = ..., url: Optional[str] = ..., emoji: Optional[Union[str, Emoji, PartialEmoji]] = ..., row: Optional[int] = ...) -> None:
        ...
    
    @property
    def style(self) -> ButtonStyle:
        """:class:`nextcord.ButtonStyle`: The style of the button."""
        ...
    
    @style.setter
    def style(self, value: ButtonStyle) -> None:
        ...
    
    @property
    def custom_id(self) -> Optional[str]:
        """Optional[:class:`str`]: The ID of the button that gets received during an interaction.

        If this button is for a URL, it does not have a custom ID.
        """
        ...
    
    @custom_id.setter
    def custom_id(self, value: Optional[str]) -> None:
        ...
    
    @property
    def url(self) -> Optional[str]:
        """Optional[:class:`str`]: The URL this button sends you to."""
        ...
    
    @url.setter
    def url(self, value: Optional[str]) -> None:
        ...
    
    @property
    def disabled(self) -> bool:
        """:class:`bool`: Whether the button is disabled or not."""
        ...
    
    @disabled.setter
    def disabled(self, value: bool) -> None:
        ...
    
    @property
    def label(self) -> Optional[str]:
        """Optional[:class:`str`]: The label of the button, if available."""
        ...
    
    @label.setter
    def label(self, value: Optional[str]) -> None:
        ...
    
    @property
    def emoji(self) -> Optional[PartialEmoji]:
        """Optional[:class:`.PartialEmoji`]: The emoji of the button, if available."""
        ...
    
    @emoji.setter
    def emoji(self, value: Optional[Union[str, Emoji, PartialEmoji]]) -> None:
        ...
    
    @classmethod
    def from_component(cls, button: ButtonComponent) -> Self:
        ...
    
    @property
    def type(self) -> ComponentType:
        ...
    
    def to_component_dict(self) -> ButtonComponentPayload:
        ...
    
    def is_dispatchable(self) -> bool:
        ...
    
    def is_persistent(self) -> bool:
        ...
    
    def refresh_component(self, button: ButtonComponent) -> None:
        ...
    


def button(*, label: Optional[str] = ..., custom_id: Optional[str] = ..., disabled: bool = ..., style: ButtonStyle = ..., emoji: Optional[Union[str, Emoji, PartialEmoji]] = ..., row: Optional[int] = ...) -> Callable[[ItemCallbackType[Button[V], ClientT]], ItemCallbackType[Button[V], ClientT]]:
    """A decorator that attaches a button to a component.

    The function being decorated should have three parameters, ``self`` representing
    the :class:`nextcord.ui.View`, the :class:`nextcord.ui.Button` being pressed and
    the :class:`nextcord.Interaction` you receive.

    .. note::

        Buttons with a URL cannot be created with this function.
        Consider creating a :class:`Button` manually instead.
        This is because buttons with a URL do not have a callback
        associated with them since Discord does not do any processing
        with it.

    Parameters
    ----------
    label: Optional[:class:`str`]
        The label of the button, if any.
    custom_id: Optional[:class:`str`]
        The ID of the button that gets received during an interaction.
        It is recommended not to set this parameter to prevent conflicts.
    style: :class:`.ButtonStyle`
        The style of the button. Defaults to :attr:`.ButtonStyle.grey`.
    disabled: :class:`bool`
        Whether the button is disabled or not. Defaults to ``False``.
    emoji: Optional[Union[:class:`str`, :class:`.Emoji`, :class:`.PartialEmoji`]]
        The emoji of the button. This can be in string form or a :class:`.PartialEmoji`
        or a full :class:`.Emoji`.
    row: Optional[:class:`int`]
        The relative row this button belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    """
    ...

