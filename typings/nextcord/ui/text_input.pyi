"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING, Tuple, TypeVar
from ..components import TextInput as TextInputComponent
from ..enums import ComponentType, TextInputStyle
from ..guild import Guild
from ..state import ConnectionState
from .item import Item
from typing_extensions import Self
from ..types.components import TextInputComponent as TextInputComponentPayload
from ..types.interactions import ComponentInteractionData

__all__ = ("TextInput", )
if TYPE_CHECKING:
    ...
V = TypeVar("V", bound="View", covariant=True)
class TextInput(Item[V]):
    """Represent a UI text input.

    .. versionadded:: 2.0

    Parameters
    ----------
    label: :class:`str`
        The label of the text input
    style: :class:`TextInputStyle`
        The style of the text input.
        By default, the style is ``TextInputStyle.short``, a one line
        input, but you can use ``TextInputStyle.paragraph``, a multi line
        input.
    custom_id: Optional[:class:`str`]
        The ID of the text input that get received during an interaction.
    row: Optional[:class:`int`]
        The relative row this text input belongs to. A Discord component can only have 5
        rows. By default, items are arranged automatically into those 5 rows. If you'd
        like to control the relative positioning of the row then passing an index is advised.
        For example, row=1 will show up before row=2. Defaults to ``None``, which is automatic
        ordering. The row number must be between 0 and 4 (i.e. zero indexed).
    min_length: Optional[:class:`int`]
        The minimal length of the user's input
    max_length: Optional[:class:`int`]
        The maximal length of the user's input
    required: Optional[:class:`bool`]
        If ``True``, the user cannot send the form without filling this
        field.
    default_value: Optional[:class:`str`]
        The value already in the input when the user open the form.
    placeholder: Optional[:class:`str`]
        The text shown to the user when the text input is empty.
    """
    __item_repr_attributes__: Tuple[str, ...] = ...
    def __init__(self, label: str, *, style: TextInputStyle = ..., custom_id: str = ..., row: Optional[int] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., required: Optional[bool] = ..., default_value: Optional[str] = ..., placeholder: Optional[str] = ...) -> None:
        ...
    
    @property
    def style(self) -> TextInputStyle:
        """:class:`nextcord.TextInputStyle`: The style of the text input."""
        ...
    
    @style.setter
    def style(self, value: TextInputStyle) -> None:
        ...
    
    @property
    def custom_id(self) -> Optional[str]:
        """Optional[:class:`str`]: The ID of the text input that gets received during an interaction."""
        ...
    
    @custom_id.setter
    def custom_id(self, value: Optional[str]) -> None:
        ...
    
    @property
    def label(self) -> str:
        """:class:`str`: The label of the text input."""
        ...
    
    @label.setter
    def label(self, value: str) -> None:
        ...
    
    @property
    def min_length(self) -> Optional[int]:
        """:class:`int`: The minimum input length for a text input"""
        ...
    
    @min_length.setter
    def min_length(self, value: int) -> None:
        ...
    
    @property
    def max_length(self) -> Optional[int]:
        """:class:`int`: The maximum input length for a text input"""
        ...
    
    @max_length.setter
    def max_length(self, value: int) -> None:
        ...
    
    @property
    def required(self) -> Optional[bool]:
        """:class:`bool`: Whether this component is required to be filled"""
        ...
    
    @required.setter
    def required(self, value: Optional[bool]) -> None:
        ...
    
    @property
    def default_value(self) -> Optional[str]:
        """Optional[:class:`str`]: The value already in the text input when the user open the form."""
        ...
    
    @default_value.setter
    def default_value(self, value: Optional[str]) -> None:
        ...
    
    @property
    def value(self) -> Optional[str]:
        """Optional[:class:`str`]: The value sent by the user.
        This field is updated when an interaction is received.
        ``TextInput.value`` is ``None`` when no interaction where received.
        """
        ...
    
    @property
    def placeholder(self) -> Optional[str]:
        """Optional[:class:`str`]: The text shown to the user when the text input is empty."""
        ...
    
    @placeholder.setter
    def placeholder(self, value: Optional[str]) -> None:
        ...
    
    @property
    def width(self) -> int:
        ...
    
    @classmethod
    def from_component(cls, text_input: TextInputComponent) -> Self:
        ...
    
    @property
    def type(self) -> ComponentType:
        ...
    
    def to_component_dict(self) -> TextInputComponentPayload:
        ...
    
    def is_dispatchable(self) -> bool:
        ...
    
    def refresh_component(self, text_input: TextInputComponent) -> None:
        ...
    
    def refresh_state(self, data: ComponentInteractionData, state: ConnectionState, guild: Optional[Guild]) -> None:
        ...
    


