"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Coroutine, Generic, Optional, TYPE_CHECKING, Tuple, TypeVar
from ..interactions import ClientT, Interaction
from typing_extensions import Self
from ..components import Component
from ..enums import ComponentType
from ..guild import Guild
from ..state import ConnectionState
from ..types.components import Component as ComponentPayload
from ..types.interactions import ComponentInteractionData

__all__ = ("Item", )
if TYPE_CHECKING:
    ...
I = TypeVar("I", bound="Item")
V = TypeVar("V", bound="View", covariant=True)
ItemCallbackType = Callable[[Any, I, Interaction[ClientT]], Coroutine[Any, Any, Any]]
class Item(Generic[V]):
    """Represents the base UI item that all UI components inherit from.

    The current UI items supported are:

    - :class:`nextcord.ui.Button`
    - :class:`nextcord.ui.StringSelect`
    - :class:`nextcord.ui.TextInput`
    - :class:`nextcord.ui.UserSelect`
    - :class:`nextcord.ui.ChannelSelect`
    - :class:`nextcord.ui.RoleSelect`
    - :class:`nextcord.ui.MentionableSelect`

    .. versionadded:: 2.0
    """
    __item_repr_attributes__: Tuple[str, ...] = ...
    def __init__(self) -> None:
        ...
    
    def to_component_dict(self) -> ComponentPayload:
        ...
    
    def refresh_component(self, component: Component) -> None:
        ...
    
    def refresh_state(self, data: ComponentInteractionData, state: ConnectionState, guild: Optional[Guild]) -> None:
        ...
    
    @classmethod
    def from_component(cls, component: Component) -> Self:
        ...
    
    @property
    def type(self) -> ComponentType:
        ...
    
    def is_dispatchable(self) -> bool:
        ...
    
    def is_persistent(self) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def row(self) -> Optional[int]:
        ...
    
    @row.setter
    def row(self, value: Optional[int]) -> None:
        ...
    
    @property
    def width(self) -> int:
        ...
    
    @property
    def view(self) -> Optional[V]:
        """Optional[:class:`View`]: The underlying view for this item."""
        ...
    
    async def callback(self, interaction: Interaction) -> None:
        """|coro|

        The callback associated with this UI item.

        This can be overridden by subclasses.

        Parameters
        ----------
        interaction: :class:`.Interaction`
            The interaction that triggered this UI item.
        """
        ...
    


